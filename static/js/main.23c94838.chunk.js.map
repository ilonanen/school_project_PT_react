{"version":3,"sources":["components/AddCustomer.js","components/AddTraining.js","components/EditCustomer.js","components/ShowTrainings.js","components/customers.js","components/trainings.js","components/Calendar.js","components/Charts.js","App.js","reportWebVitals.js","index.js"],"names":["AddCustomer","props","useState","open","setOpen","lastname","firstname","streetaddress","postcode","city","email","phone","customer","setCustomer","handleClose","inputChanged","event","target","name","value","Button","style","margin","variant","color","onClick","Dialog","onClose","DialogTitle","DialogContent","TextField","label","onChange","fullWidth","DialogActions","addCustomer","AddTraining","Date","newDate","setDate","date","activity","duration","params","data","links","href","training","setTraining","Tooltip","title","IconButton","aria-label","utils","MomentUtils","DateTimePicker","autoOk","console","log","moment","toISOString","dateChanged","ampm","showTodayButton","type","select","MenuItem","addTraining","EditCustomer","editCustomer","ShowTrainings","trainings","setTrainings","url","getTrainings","fetch","then","response","json","content","catch","err","error","columns","headerName","valueGetter","format","sort","field","maxWidth","className","height","width","rowData","columnDefs","Customers","customers","setCustomers","useEffect","getCustomers","newTraining","method","headers","body","JSON","stringify","_","link","editedCustomer","cellRendererFramework","window","confirm","deleteCustomer","sortable","filter","suppressSizeToFit","pagination","paginationAutoPageSize","resizable","sizeColumnsToFit","skipHeaderOnAutoSize","autoSizeAllColumns","newCustomer","Trainings","deleteTraining","Calendar","events","map","description","start","end","add","React","dialogTitle","setdialogTitle","popContent","setPopContent","line2","setLine2","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","headerToolbar","left","center","right","initialView","slotMinTime","slotLabelFormat","hour","minute","meridiem","hour12","eventTimeFormat","eventClick","_instance","range","_def","extendedProps","Charts","activities","useMemo","orderBy","groupBy","key","minutes","sumBy","top","bottom","dataKey","unit","ticks","stroke","strokeDasharray","fill","App","setValue","AppBar","position","Tabs","newValue","centered","Tab","to","component","Link","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23c94838.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\n\r\nfunction AddCustomer(props) {\r\n    \r\n    const [open, setOpen] = useState(false)\r\n    const [customer, setCustomer] = useState({\r\n        lastname: '',\r\n        firstname: '',\r\n        streetaddress: '',\r\n        postcode: '',\r\n        city: '',\r\n        email: '',\r\n        phone: ''\r\n    })\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n        setCustomer({\r\n            lastname: '',\r\n            firstname: '',\r\n            streetaddress: '',\r\n            postcode: '',\r\n            city: '',\r\n            email: '',\r\n            phone: ''\r\n        })\r\n    }\r\n\r\n    const handleSave = () => {\r\n        props.addCustomer(customer)\r\n        handleClose()\r\n    }\r\n\r\n    const inputChanged = (event) => {\r\n        setCustomer({...customer, [event.target.name]: event.target.value})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button style = {{ margin: 10 }} variant=\"contained\" color=\"primary\" onClick={handleClickOpen}>\r\n                Add a new customer\r\n            </Button>\r\n            <Dialog open = {open} onClose = {handleClose}>\r\n                <DialogTitle>New customer</DialogTitle>\r\n                <DialogContent>\r\n                <TextField\r\n                    margin = \"dense\"\r\n                    label = \"First name\"\r\n                    name = 'firstname'\r\n                    value = {customer.firstname}\r\n                    onChange = {inputChanged}\r\n                    fullWidth\r\n                />\r\n                <TextField\r\n                    margin = \"dense\"\r\n                    label = \"Last name\"\r\n                    name = 'lastname'\r\n                    value = {customer.lastname}\r\n                    onChange = {inputChanged}\r\n                    fullWidth\r\n                />\r\n                <TextField\r\n                    margin = \"dense\"\r\n                    label = \"Address\"\r\n                    name = 'streetaddress'\r\n                    value = {customer.streetaddress}\r\n                    onChange = {inputChanged}\r\n                    fullWidth\r\n                />\r\n                <TextField\r\n                    margin = \"dense\"\r\n                    label = \"Post code\"\r\n                    name = 'postcode'\r\n                    value = {customer.postcode}\r\n                    onChange = {inputChanged}\r\n                    fullWidth\r\n                />\r\n                <TextField\r\n                    margin = \"dense\"\r\n                    label = \"City\"\r\n                    name = 'city'\r\n                    value = {customer.city}\r\n                    onChange = {inputChanged}\r\n                    fullWidth\r\n                />\r\n                <TextField\r\n                    margin = \"dense\"\r\n                    label = \"E-mail\"\r\n                    name = 'email'\r\n                    value = {customer.email}\r\n                    onChange = {inputChanged}\r\n                    fullWidth\r\n                />\r\n                <TextField\r\n                    margin = \"dense\"\r\n                    label = \"Phone number\"\r\n                    name = 'phone'\r\n                    value = {customer.phone}\r\n                    onChange = {inputChanged}\r\n                    fullWidth\r\n                />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={handleSave} color=\"default\">\r\n                    Save\r\n                </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddCustomer","import React, { useState } from 'react'\r\n\r\nimport Button from '@material-ui/core/Button'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport { IconButton } from '@material-ui/core'\r\nimport AddCircleOutlineOutlinedIcon from '@material-ui/icons/AddCircleOutlineOutlined';\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\n\r\nimport moment from 'moment'\r\nimport MomentUtils from '@date-io/moment'\r\nimport {\r\n  DateTimePicker,\r\n  MuiPickersUtilsProvider,\r\n} from '@material-ui/pickers'\r\n\r\nfunction AddTraining(props) {\r\n\r\n    const [open, setOpen] = useState(false)\r\n    const [newDate, setDate] = useState(new Date())\r\n    const [training, setTraining] = useState({\r\n        date: newDate,\r\n        activity: '',\r\n        duration: 0,\r\n        customer: props.params.data.links[0].href\r\n    })\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n        setTraining({\r\n            activity: '',\r\n            duration: 0,\r\n        })\r\n    }\r\n\r\n    const handleSave = () => {\r\n        props.addTraining(training)\r\n        handleClose()\r\n    }\r\n    \r\n    const inputChanged = (event) => {\r\n        setTraining({...training, [event.target.name]: event.target.value})\r\n    }\r\n    \r\n    const dateChanged = (newDate) => {\r\n        setDate(newDate)\r\n        console.log(newDate) \r\n        setDate(moment(newDate).toISOString())\r\n        setTraining({...training, date: newDate})   \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Tooltip title = 'Add a training to customer'>\r\n                <IconButton color = 'primary' aria-label = 'add-training' onClick = {handleClickOpen}>\r\n                    <AddCircleOutlineOutlinedIcon />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <Dialog open = {open} onClose = {handleClose}>\r\n                <DialogTitle>New training for {props.params.data.firstname} {props.params.data.lastname}</DialogTitle>\r\n                <DialogContent>\r\n                <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                    <DateTimePicker \r\n                        autoOk = {true}\r\n                        value = {newDate} \r\n                        onChange = {newDate => dateChanged(newDate)} \r\n                        ampm = {false}\r\n                        showTodayButton\r\n                    />\r\n                </MuiPickersUtilsProvider>\r\n                <TextField\r\n                    margin = \"dense\"\r\n                    type = 'text'\r\n                    label = \"Activity\"\r\n                    name = 'activity'\r\n                    value = {training.activity}\r\n                    onChange = {inputChanged}\r\n                    fullWidth\r\n                    select\r\n                >\r\n                    <MenuItem value=\"Gym training\">Gym Training</MenuItem>\r\n                    <MenuItem value=\"Running\">Running</MenuItem>\r\n                    <MenuItem value=\"Spinning\">Spinning</MenuItem>\r\n                    <MenuItem value=\"Cycling\">Cycling</MenuItem>\r\n                    <MenuItem value=\"Walking\">Walking</MenuItem>\r\n                    <MenuItem value=\"Swimming\">Swimming</MenuItem>\r\n                    <MenuItem value=\"Cardio\">Cardio</MenuItem>\r\n                    <MenuItem value=\"Yoga\">Yoga</MenuItem>\r\n                </TextField>\r\n                <TextField\r\n                    margin = \"dense\"\r\n                    type = 'int'\r\n                    label = \"Duration\"\r\n                    name = 'duration'\r\n                    value = {training.duration}\r\n                    onChange = {inputChanged}\r\n                    fullWidth\r\n                    select\r\n                    >\r\n                    <MenuItem value='15'>15 min</MenuItem>\r\n                    <MenuItem value='30'>30 min</MenuItem>\r\n                    <MenuItem value='45'>45 min</MenuItem>\r\n                    <MenuItem value='60'>1 hour</MenuItem>\r\n                    <MenuItem value='75'>75 min</MenuItem>\r\n                    <MenuItem value='90'>1,5 hours</MenuItem>\r\n                    <MenuItem value='120'>2 hours</MenuItem>\r\n                </TextField>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={handleSave} color=\"default\">\r\n                    Save\r\n                </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddTraining","import React, { useState } from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\n\r\nimport { IconButton } from '@material-ui/core'\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\n\r\nfunction EditCustomer(props) {\r\n\r\n    const [open, setOpen] = useState(false)\r\n    const [customer, setCustomer] = useState({\r\n        lastname: '',\r\n        firstname: '',\r\n        streetaddress: '',\r\n        postcode: '',\r\n        city: '',\r\n        email: '',\r\n        phone: ''\r\n    })\r\n\r\n    const handleClickOpen = () => {\r\n        setCustomer({\r\n            lastname: props.params.data.lastname,\r\n            firstname: props.params.data.firstname,\r\n            streetaddress: props.params.data.streetaddress,\r\n            postcode: props.params.data.postcode,\r\n            city: props.params.data.city,\r\n            email: props.params.data.email,\r\n            phone: props.params.data.phone\r\n        })\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n        setCustomer({\r\n            lastname: '',\r\n            firstname: '',\r\n            streetaddress: '',\r\n            postcode: '',\r\n            city: '',\r\n            email: '',\r\n            phone: ''\r\n        })\r\n    }\r\n\r\n    const handleSave = () => {\r\n        props.editCustomer(props.params.data.links[0].href, customer)\r\n        handleClose()\r\n    }\r\n\r\n    const inputChanged = (event) => {\r\n        setCustomer({...customer, [event.target.name]: event.target.value})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Tooltip title = 'Edit customer'>\r\n                <IconButton color = 'default' aria-label = 'edit-customer' onClick = {handleClickOpen}>\r\n                    <EditOutlinedIcon />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <Dialog open = {open} onClose = {handleClose}>\r\n                <DialogTitle>Edit customer</DialogTitle>\r\n                <DialogContent>\r\n                <TextField\r\n                    margin = \"dense\"\r\n                    label = \"First name\"\r\n                    name = 'firstname'\r\n                    value = {customer.firstname}\r\n                    onChange = {inputChanged}\r\n                    fullWidth\r\n                />\r\n                <TextField\r\n                    margin = \"dense\"\r\n                    label = \"Last name\"\r\n                    name = 'lastname'\r\n                    value = {customer.lastname}\r\n                    onChange = {inputChanged}\r\n                    fullWidth\r\n                />\r\n                <TextField\r\n                    margin = \"dense\"\r\n                    label = \"Address\"\r\n                    name = 'streetaddress'\r\n                    value = {customer.streetaddress}\r\n                    onChange = {inputChanged}\r\n                    fullWidth\r\n                />\r\n                <TextField\r\n                    margin = \"dense\"\r\n                    label = \"Post code\"\r\n                    name = 'postcode'\r\n                    value = {customer.postcode}\r\n                    onChange = {inputChanged}\r\n                    fullWidth\r\n                />\r\n                <TextField\r\n                    margin = \"dense\"\r\n                    label = \"City\"\r\n                    name = 'city'\r\n                    value = {customer.city}\r\n                    onChange = {inputChanged}\r\n                    fullWidth\r\n                />\r\n                <TextField\r\n                    margin = \"dense\"\r\n                    label = \"E-mail\"\r\n                    name = 'email'\r\n                    value = {customer.email}\r\n                    onChange = {inputChanged}\r\n                    fullWidth\r\n                />\r\n                <TextField\r\n                    margin = \"dense\"\r\n                    label = \"Phone number\"\r\n                    name = 'phone'\r\n                    value = {customer.phone}\r\n                    onChange = {inputChanged}\r\n                    fullWidth\r\n                />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={handleSave} color=\"default\">\r\n                    Save\r\n                </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditCustomer","import React, { useState } from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\n\r\nimport { AgGridReact } from 'ag-grid-react'\r\nimport 'ag-grid-community/dist/styles/ag-grid.css'\r\nimport 'ag-grid-community/dist/styles/ag-theme-material.css'\r\n\r\nimport { IconButton } from '@material-ui/core'\r\nimport DirectionsRunOutlinedIcon from '@material-ui/icons/DirectionsRunOutlined'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\n\r\nimport moment from 'moment'\r\n\r\nfunction ShowTrainings(props) {\r\n\r\n    const [open, setOpen] = useState(false)\r\n    const [trainings, setTrainings] = useState([])\r\n\r\n    const url = props.params.data.links[2].href\r\n\r\n\r\n    const handleClickOpen = () => {\r\n        getTrainings()\r\n        console.log(trainings)\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const getTrainings = () => {\r\n        fetch(url)\r\n        .then (response => response.json())\r\n        .then(data => setTrainings(data.content))\r\n        .catch(err => console.error(err))\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            headerName: 'Date and time',\r\n            valueGetter: params => {\r\n                return moment(params.data.date).format(\"DD.MM.YYYY HH:mm\")\r\n            },\r\n            sort: 'desc'\r\n        },\r\n        {field: 'activity'},\r\n        {field: 'duration'}\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <Tooltip title = \"Show customer's trainings\">\r\n                <IconButton color = 'default' aria-label = 'show-trainings' onClick = {handleClickOpen}>\r\n                    <DirectionsRunOutlinedIcon />\r\n                </IconButton>\r\n            </Tooltip>\r\n            <Dialog open = {open} onClose = {handleClose} maxWidth = 'sm' fullWidth>\r\n                <DialogTitle>Trainings for {props.params.data.firstname} {props.params.data.lastname}</DialogTitle>\r\n                <DialogContent>\r\n                    <div className = 'ag-theme-material' style = {{height: 300, width: '100%', margin: 'auto'}}>\r\n                        <AgGridReact\r\n                            rowData = {trainings}\r\n                            columnDefs = {columns}>\r\n                        </AgGridReact>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                    close\r\n                </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShowTrainings","import React, { useState, useEffect } from 'react'\r\n\r\nimport { IconButton } from '@material-ui/core'\r\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined'\r\n\r\nimport { AgGridReact } from 'ag-grid-react'\r\nimport 'ag-grid-community/dist/styles/ag-grid.css'\r\nimport 'ag-grid-community/dist/styles/ag-theme-material.css'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\n\r\nimport AddCustomer from './AddCustomer'\r\nimport AddTraining from './AddTraining'\r\nimport EditCustomer from './EditCustomer'\r\nimport ShowTrainings from './ShowTrainings'\r\n\r\n\r\n\r\nfunction Customers() {\r\n    const [customers, setCustomers] = useState([])\r\n    \r\n    useEffect(() => {\r\n        getCustomers()\r\n    }, [])\r\n\r\n    const getCustomers = () => {\r\n        fetch('https://customerrest.herokuapp.com/api/customers')\r\n        .then (response => response.json())\r\n        .then(data => setCustomers(data.content))\r\n        .catch(err => console.error(err))\r\n    }\r\n\r\n    const deleteCustomer = (params) => {\r\n        if (window.confirm('Delete customer and all their trainings?')) {\r\n            fetch(params.value[0].href, {\r\n                method: 'DELETE'\r\n            })\r\n            .then (_ => fetch(params.value[2].href, {\r\n                method: 'DELETE'\r\n            }))\r\n            .then (_ => getCustomers())\r\n            .catch(err => console.error(err))\r\n        }\r\n    }\r\n\r\n    const addCustomer = (newCustomer) => {\r\n        fetch('https://customerrest.herokuapp.com/api/customers', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify(newCustomer)\r\n        })\r\n        .then (_ => getCustomers())\r\n        .catch (err => console.error(err))\r\n    }\r\n\r\n    const addTraining = (newTraining) => {\r\n        fetch('https://customerrest.herokuapp.com/api/trainings', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify(newTraining)\r\n        })\r\n        .then (_ => getCustomers())\r\n        .catch (err => console.error(err))\r\n    }\r\n\r\n    const editCustomer = (link, editedCustomer) => {\r\n        fetch(link, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify(editedCustomer)\r\n        })\r\n        .then (_ => getCustomers())\r\n        .catch (err => console.error(err))\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            headerName: '',\r\n            field: 'data',\r\n            width: 60,\r\n            cellRendererFramework: params => <AddTraining addTraining = {addTraining} params = {params} />\r\n        },\r\n        {\r\n            headerName: '',\r\n            field: 'data',\r\n            width: 60,\r\n            cellRendererFramework: params => <EditCustomer editCustomer = {editCustomer} params = {params} />\r\n        },\r\n        {\r\n            headerName: '',\r\n            field: 'links',\r\n            width: 60,\r\n            cellRendererFramework: params =>\r\n            <Tooltip title = 'Delete customer'>\r\n                    <IconButton color = 'secondary' onClick = {() => deleteCustomer(params)}>\r\n                        <DeleteOutlinedIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n        },\r\n        {\r\n            headerName: '',\r\n            field: 'data',\r\n            width: 60,\r\n            cellRendererFramework: params => <ShowTrainings params = {params} />\r\n        },\r\n        {headerName: 'Last name', field: 'lastname', width: 160, sortable: true, sort: 'asc', filter: true, suppressSizeToFit: false},\r\n        {headerName: 'First Name', field: 'firstname', width: 160, sortable: true, filter: true, suppressSizeToFit: false},\r\n        {field: 'email', sortable: true, filter: true, suppressSizeToFit: false},\r\n        {field: 'phone', sortable: true, filter: true, suppressSizeToFit: false},\r\n        {headerName: 'Address', field: 'streetaddress', sortable: true, filter: true, suppressSizeToFit: false},\r\n        {headerName: 'Zip', field: 'postcode', width: 120, sortable: true, filter: true, suppressSizeToFit: false},\r\n        {field: 'city', width: 120, sortable: true, filter: true, suppressSizeToFit: false}\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <h1>Customers</h1>\r\n            <div className = 'ag-theme-material' style = {{height: 600, width: '95%', margin: 'auto'}}>\r\n                <AgGridReact\r\n                    rowData = {customers}\r\n                    columnDefs = {columns}\r\n                    pagination = 'true'\r\n                    paginationAutoPageSize = 'true'\r\n                    resizable = 'true'\r\n                    sizeColumnsToFit\r\n                    skipHeaderOnAutoSize\r\n                    autoSizeAllColumns\r\n                    >\r\n                </AgGridReact>\r\n            </div>\r\n            <AddCustomer addCustomer = {addCustomer} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Customers","import React, { useState, useEffect } from 'react'\r\n\r\nimport { AgGridReact } from 'ag-grid-react'\r\nimport 'ag-grid-community/dist/styles/ag-grid.css'\r\nimport 'ag-grid-community/dist/styles/ag-theme-material.css'\r\n\r\nimport { IconButton } from '@material-ui/core';\r\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\n\r\nimport moment from 'moment'\r\n\r\nfunction Trainings() {\r\n    const [trainings, setTrainings] = useState([])\r\n    \r\n    useEffect(() => {\r\n        getTrainings()\r\n    }, [])\r\n\r\n    const getTrainings = () => {\r\n        fetch('https://customerrest.herokuapp.com/gettrainings')\r\n        .then (response => response.json())\r\n        .then(data => setTrainings(data))\r\n        .catch(err => console.error(err))\r\n    }\r\n\r\n    const deleteTraining = (params) => {\r\n        if (window.confirm('Delete training?')) {\r\n            fetch('https://customerrest.herokuapp.com/api/trainings/' + params.value, \r\n            {\r\n                method: 'DELETE'\r\n            })\r\n            .then (_ => getTrainings())\r\n            .catch(err => console.error(err))\r\n        }\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            headerName: 'Date and time',\r\n            valueGetter: params => {\r\n                return moment(params.data.date).format(\"DD.MM.YYYY HH:mm\")\r\n            },\r\n            suppressSizeToFit: false,\r\n            sortable: true,\r\n            filter: true,\r\n            sort: 'desc'\r\n        },\r\n        {field: 'activity', width: 160, sortable: true, suppressSizeToFit: false, filter: true},\r\n        {field: 'duration', width: 160, sortable: true, suppressSizeToFit: false, filter: true},\r\n        {\r\n            headerName: 'Customer', \r\n            valueGetter: params => {\r\n                return params.data.customer.lastname + ' ' + params.data.customer.firstname\r\n            },\r\n            suppressSizeToFit: false,\r\n            sortable: true,\r\n            filter: true\r\n        },\r\n        {\r\n            headerName: '',\r\n            field: 'id',\r\n            suppressSizeToFit: false,\r\n            cellRendererFramework: params =>\r\n                <Tooltip title = \"Delete training\">\r\n                    <IconButton color = 'secondary' onClick = {() => deleteTraining(params)}>\r\n                        <DeleteOutlinedIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h1>Trainings</h1>\r\n            </div>\r\n            <div className = 'ag-theme-material' style = {{height: 640, width: '75%', margin: 'auto'}}>\r\n                <AgGridReact\r\n                    rowData = {trainings}\r\n                    columnDefs = {columns}\r\n                    pagination = 'true'\r\n                    paginationAutoPageSize = 'true'\r\n                    resizable = 'true'\r\n                    sizeColumnsToFit\r\n                    autoSizeAllColumns\r\n                    skipHeaderOnAutoSize\r\n                    >\r\n                </AgGridReact>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Trainings","import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\n\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport interactionPlugin from '@fullcalendar/interaction'\r\n\r\nimport moment from 'moment'\r\nimport { Dialog, DialogActions, DialogTitle, DialogContent, Button } from '@material-ui/core'\r\n\r\n\r\nfunction Calendar() {\r\n    const [trainings, setTrainings] = useState([])\r\n        \r\n    useEffect(() => {\r\n        getTrainings()        \r\n    }, [])\r\n    \r\n    const getTrainings = () => {\r\n        fetch('https://customerrest.herokuapp.com/gettrainings')\r\n        .then (response => response.json())\r\n        .then(data => setTrainings(data))\r\n        .catch(err => console.error(err))\r\n    }\r\n    \r\n    const events = trainings.map(training => {\r\n            return {\r\n                title: training.activity + ' (' + training.duration + ' min)',\r\n                description: training.customer.firstname + ' ' + training.customer.lastname,\r\n                start: training.date,\r\n                end: moment(training.date).add(training.duration, 'm')\r\n            }\r\n        })\r\n\r\n\r\n    const [open, setOpen] = React.useState(false)\r\n    const [dialogTitle, setdialogTitle] = React.useState('')\r\n    const [popContent, setPopContent] = React.useState('')\r\n    const [line2, setLine2] = React.useState('')\r\n\r\n    const handleEventClick = (event) => {\r\n      setPopContent(moment(event.event._instance.range.start).format('DD.MM.YYYY HH.mm'))\r\n      setLine2(event.event._def.title + ', ' + event.event._def.extendedProps.description)\r\n      setdialogTitle(event.event._def.title)\r\n      console.log(event.event)\r\n      setOpen(true)\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setOpen(false)\r\n    };\r\n  \r\n    return (\r\n        <div>\r\n        <FullCalendar\r\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n            headerToolbar={{\r\n                left: 'prev,next today',\r\n                center: 'title',\r\n                right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n            }}\r\n            initialView = \"dayGridMonth\"\r\n            slotMinTime = '06:00:00'\r\n            slotLabelFormat = {{\r\n                hour: '2-digit',\r\n                minute: '2-digit',\r\n                meridiem: false,\r\n                hour12: false\r\n            }}\r\n            events = {events}\r\n            eventTimeFormat = {{\r\n                hour: '2-digit',\r\n                minute: '2-digit',\r\n                meridiem: false,\r\n                hour12: false\r\n            }}\r\n            eventClick = {handleEventClick}\r\n\r\n            />\r\n\r\n            <Dialog\r\n                open = {open}\r\n                onClose = {handleClose}\r\n            >\r\n                <DialogTitle>\r\n                    {dialogTitle}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <div>{popContent}</div>\r\n                    <div>{line2}</div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick = {handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calendar","import React from 'react'\r\nimport { useState, useEffect, useMemo } from 'react'\r\nimport { groupBy, sumBy, map, orderBy } from 'lodash'\r\nimport { BarChart, XAxis, YAxis, CartesianGrid, Bar, Tooltip, ResponsiveContainer } from 'recharts'\r\n\r\n\r\nfunction Charts() {\r\n    const [trainings, setTrainings] = useState([])\r\n    \r\n    useEffect(() => {\r\n        getTrainings()\r\n    }, [])\r\n\r\n    const getTrainings = () => {\r\n        fetch('https://customerrest.herokuapp.com/gettrainings')\r\n        .then (response => response.json())\r\n        .then (data => setTrainings(data))\r\n        .catch (err => console.error(err))\r\n    }\r\n\r\n    const activities = useMemo(() => \r\n        orderBy\r\n            (map\r\n                (groupBy(trainings, 'activity'), (value, key) => (\r\n                    {\r\n                        activity: key, minutes: sumBy(value, 'duration')\r\n                    }\r\n                )\r\n            ), 'minutes', 'desc'), \r\n        [trainings]\r\n    )\r\n    \r\n    console.log(activities)\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <ResponsiveContainer width = '75%' height = {600}>\r\n                <BarChart\r\n                    data = {activities}\r\n                    margin = {{ top: 20, left: 10, right: 10, bottom: 10 }}\r\n                >\r\n                    <XAxis dataKey = \"activity\" />\r\n                    <YAxis \r\n                        dataKey = \"minutes\" \r\n                        unit = ' min'\r\n                        ticks = {[30, 60, 90, 120, 150, 180, 210, 240]}\r\n                        type = 'number'\r\n                    />\r\n                    <Tooltip />\r\n                    <CartesianGrid stroke=\"#f5f5f5\" strokeDasharray = '5 5' />\r\n                    <Bar dataKey=\"minutes\" fill=\"#ba000d\" />\r\n                </BarChart>\r\n            </ResponsiveContainer>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Charts","import './App.css';\nimport React from 'react'\nimport { BrowserRouter, Switch, Route, Link } from 'react-router-dom'\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\n\nimport Customers from './components/customers'\nimport Trainings from './components/trainings'\nimport Calendar from './components/Calendar'\nimport Charts from './components/Charts'\n\nfunction App() {\n  const  [value, setValue] = React.useState(0)\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue)\n  }\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <AppBar position = 'static' color = 'primary'>\n          <Tabs value = {value} onChange = {handleChange} centered>\n            <Tab label = \"Calendar\" to = \"/calendar\" component = {Link} />\n            <Tab label = \"Customers\" to = \"/customers\" component = {Link} />\n            <Tab label = \"Trainings\" to = \"/trainings\" component = {Link} />\n            <Tab label = \"Statistics\" to = \"/stats\" component = {Link} />\n          </Tabs>\n        </AppBar>\n        <Switch>\n          <Route exact path = \"/school_project_PT_react\" component = {Calendar}></Route>\n          <Route path = \"/calendar\" component = {Calendar} />\n          <Route path = \"/customers\" component = {Customers} />\n          <Route path = \"/trainings\" component = {Trainings} />\n          <Route path = \"/stats\" component = {Charts} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}