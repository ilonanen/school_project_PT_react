{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ilona\\\\Documents\\\\React\\\\ptreact\\\\src\\\\components\\\\Calendar.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport moment from 'moment';\n\nfunction Calendar() {\n  _s();\n\n  const [trainings, setTrainings] = useState([]);\n  const [anEvent, setEvent] = useState({});\n  const [events, setEvents] = useState([]);\n  useEffect(() => {\n    getTrainings();\n    setEvent({\n      date: moment(trainings.date).toISOString(),\n      title: trainings.activity\n    });\n    setEvents(...events, anEvent);\n  }, []);\n\n  const getTrainings = () => {\n    fetch('https://customerrest.herokuapp.com/gettrainings').then(response => response.json()).then(data => setTrainings(data)).catch(err => console.error(err));\n  };\n\n  return /*#__PURE__*/_jsxDEV(FullCalendar, {\n    plugins: [dayGridPlugin, timeGridPlugin],\n    headerToolbar: {\n      left: 'prev,next today',\n      center: 'title',\n      right: 'dayGridMonth,timeGridWeek,timeGridDay'\n    },\n    initialView: \"dayGridMonth\",\n    initialEvents: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Calendar, \"BK+f/NELVQddm0dokP4BN6mmLQM=\");\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["C:/Users/ilona/Documents/React/ptreact/src/components/Calendar.js"],"names":["React","useState","useEffect","FullCalendar","dayGridPlugin","timeGridPlugin","moment","Calendar","trainings","setTrainings","anEvent","setEvent","events","setEvents","getTrainings","date","toISOString","title","activity","fetch","then","response","json","data","catch","err","console","error","left","center","right"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AAEA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAChB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACS,OAAD,EAAUC,QAAV,IAAsBV,QAAQ,CAAE,EAAF,CAApC;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,EAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,YAAY;AACZH,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAET,MAAM,CAACE,SAAS,CAACO,IAAX,CAAN,CAAuBC,WAAvB,EADD;AAELC,MAAAA,KAAK,EAAET,SAAS,CAACU;AAFZ,KAAD,CAAR;AAIAL,IAAAA,SAAS,CAAC,GAAGD,MAAJ,EAAYF,OAAZ,CAAT;AACH,GAPQ,EAON,EAPM,CAAT;;AASA,QAAMI,YAAY,GAAG,MAAM;AACvBK,IAAAA,KAAK,CAAC,iDAAD,CAAL,CACCC,IADD,CACOC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADnB,EAECF,IAFD,CAEMG,IAAI,IAAId,YAAY,CAACc,IAAD,CAF1B,EAGCC,KAHD,CAGOC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAHd;AAIH,GALD;;AAQA,sBACE,QAAC,YAAD;AACE,IAAA,OAAO,EAAE,CAACrB,aAAD,EAAgBC,cAAhB,CADX;AAEE,IAAA,aAAa,EAAE;AACXuB,MAAAA,IAAI,EAAE,iBADK;AAEXC,MAAAA,MAAM,EAAE,OAFG;AAGXC,MAAAA,KAAK,EAAE;AAHI,KAFjB;AAOM,IAAA,WAAW,EAAG,cAPpB;AAQM,IAAA,aAAa,EACTlB;AATV;AAAA;AAAA;AAAA;AAAA,UADF;AAcH;;GApCQL,Q;;KAAAA,Q;AAsCT,eAAeA,QAAf","sourcesContent":["import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\n\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\n\r\nimport moment from 'moment'\r\n\r\nfunction Calendar() {\r\n    const [trainings, setTrainings] = useState([])\r\n    const [anEvent, setEvent] = useState ({})\r\n    const [events, setEvents] = useState([])\r\n\r\n    useEffect(() => {\r\n        getTrainings()        \r\n        setEvent({\r\n            date: moment(trainings.date).toISOString(),\r\n            title: trainings.activity\r\n        })\r\n        setEvents(...events, anEvent)\r\n    }, [])\r\n\r\n    const getTrainings = () => {\r\n        fetch('https://customerrest.herokuapp.com/gettrainings')\r\n        .then (response => response.json())\r\n        .then(data => setTrainings(data))\r\n        .catch(err => console.error(err))\r\n    }\r\n\r\n\r\n    return (\r\n      <FullCalendar\r\n        plugins={[dayGridPlugin, timeGridPlugin]}\r\n        headerToolbar={{\r\n            left: 'prev,next today',\r\n            center: 'title',\r\n            right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n        }}\r\n            initialView = \"dayGridMonth\"\r\n            initialEvents = {\r\n                events\r\n            }\r\n      />\r\n    )\r\n}\r\n\r\nexport default Calendar"]},"metadata":{},"sourceType":"module"}