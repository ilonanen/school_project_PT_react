{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ilona\\\\Documents\\\\React\\\\ptreact\\\\src\\\\components\\\\Calendar.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport moment from 'moment';\n\nfunction Calendar() {\n  _s();\n\n  const [trainings, setTrainings] = useState([]); // const [events, setEvents] = useState([])\n\n  useEffect(() => {\n    getTrainings();\n  }, []);\n\n  const getTrainings = () => {\n    fetch('https://customerrest.herokuapp.com/gettrainings').then(response => response.json()).then(data => setTrainings(data)).catch(err => console.error(err));\n  };\n\n  const events = trainings.map(training => {\n    return {\n      title: training.activity + ', ' + training.customer.firstname + ' ' + training.customer.lastname,\n      start: training.date,\n      end: moment(training.date).add(training.duration, 'm')\n    };\n  });\n\n  const handleEventClick = info => {\n    alert(moment(info.event.start).format('DD.MM.YYYY HH.mm') + ' ' + info.event.title);\n  };\n\n  return /*#__PURE__*/_jsxDEV(FullCalendar, {\n    plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n    headerToolbar: {\n      left: 'prev,next today',\n      center: 'title',\n      right: 'dayGridMonth,timeGridWeek,timeGridDay'\n    },\n    initialView: \"dayGridMonth\",\n    events: events,\n    eventClick: handleEventClick\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Calendar, \"uabLU8KjmDYF8yoFx+QKK9rR174=\");\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["C:/Users/ilona/Documents/React/ptreact/src/components/Calendar.js"],"names":["React","useState","useEffect","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","moment","Calendar","trainings","setTrainings","getTrainings","fetch","then","response","json","data","catch","err","console","error","events","map","training","title","activity","customer","firstname","lastname","start","date","end","add","duration","handleEventClick","info","alert","event","format","left","center","right"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;AAEA,OAAOC,MAAP,MAAmB,QAAnB;;AAGA,SAASC,QAAT,GAAoB;AAAA;;AAChB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,EAAD,CAA1C,CADgB,CAEhB;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,YAAY;AACf,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,YAAY,GAAG,MAAM;AACvBC,IAAAA,KAAK,CAAC,iDAAD,CAAL,CACCC,IADD,CACOC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADnB,EAECF,IAFD,CAEMG,IAAI,IAAIN,YAAY,CAACM,IAAD,CAF1B,EAGCC,KAHD,CAGOC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAHd;AAIH,GALD;;AAOA,QAAMG,MAAM,GAAGZ,SAAS,CAACa,GAAV,CAAcC,QAAQ,IAAI;AACjC,WAAO;AACHC,MAAAA,KAAK,EAAED,QAAQ,CAACE,QAAT,GAAoB,IAApB,GAA2BF,QAAQ,CAACG,QAAT,CAAkBC,SAA7C,GAAyD,GAAzD,GAA+DJ,QAAQ,CAACG,QAAT,CAAkBE,QADrF;AAEHC,MAAAA,KAAK,EAAEN,QAAQ,CAACO,IAFb;AAGHC,MAAAA,GAAG,EAAExB,MAAM,CAACgB,QAAQ,CAACO,IAAV,CAAN,CAAsBE,GAAtB,CAA0BT,QAAQ,CAACU,QAAnC,EAA6C,GAA7C;AAHF,KAAP;AAKH,GANU,CAAf;;AAQA,QAAMC,gBAAgB,GAAIC,IAAI,IAAI;AAC9BC,IAAAA,KAAK,CAAC7B,MAAM,CAAC4B,IAAI,CAACE,KAAL,CAAWR,KAAZ,CAAN,CAAyBS,MAAzB,CAAgC,kBAAhC,IAAsD,GAAtD,GAA4DH,IAAI,CAACE,KAAL,CAAWb,KAAxE,CAAL;AACH,GAFD;;AAKA,sBACE,QAAC,YAAD;AACE,IAAA,OAAO,EAAE,CAACpB,aAAD,EAAgBC,cAAhB,EAAgCC,iBAAhC,CADX;AAEE,IAAA,aAAa,EAAE;AACXiC,MAAAA,IAAI,EAAE,iBADK;AAEXC,MAAAA,MAAM,EAAE,OAFG;AAGXC,MAAAA,KAAK,EAAE;AAHI,KAFjB;AAOE,IAAA,WAAW,EAAG,cAPhB;AAQE,IAAA,MAAM,EAAIpB,MARZ;AASE,IAAA,UAAU,EAAIa;AAThB;AAAA;AAAA;AAAA;AAAA,UADF;AAaH;;GAzCQ1B,Q;;KAAAA,Q;AA2CT,eAAeA,QAAf","sourcesContent":["import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\n\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport interactionPlugin from '@fullcalendar/interaction'\r\n\r\nimport moment from 'moment'\r\n\r\n\r\nfunction Calendar() {\r\n    const [trainings, setTrainings] = useState([])\r\n    // const [events, setEvents] = useState([])\r\n    \r\n    useEffect(() => {\r\n        getTrainings()        \r\n    }, [])\r\n    \r\n    const getTrainings = () => {\r\n        fetch('https://customerrest.herokuapp.com/gettrainings')\r\n        .then (response => response.json())\r\n        .then(data => setTrainings(data))\r\n        .catch(err => console.error(err))\r\n    }\r\n    \r\n    const events = trainings.map(training => {\r\n            return {\r\n                title: training.activity + ', ' + training.customer.firstname + ' ' + training.customer.lastname,\r\n                start: training.date,\r\n                end: moment(training.date).add(training.duration, 'm')\r\n            }\r\n        })\r\n\r\n    const handleEventClick = (info => {\r\n        alert(moment(info.event.start).format('DD.MM.YYYY HH.mm') + ' ' + info.event.title )\r\n    })\r\n\r\n\r\n    return (\r\n      <FullCalendar\r\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n        headerToolbar={{\r\n            left: 'prev,next today',\r\n            center: 'title',\r\n            right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n        }}\r\n        initialView = \"dayGridMonth\"\r\n        events = {events}\r\n        eventClick = {handleEventClick}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Calendar"]},"metadata":{},"sourceType":"module"}