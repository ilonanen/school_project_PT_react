{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ilona\\\\Documents\\\\React\\\\ptreact\\\\src\\\\components\\\\customers.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { IconButton } from '@material-ui/core';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-material.css';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport AddCustomer from './AddCustomer';\nimport AddTraining from './AddTraining';\nimport EditCustomer from './EditCustomer';\nimport ShowTrainings from './ShowTrainings';\n\nfunction Customers() {\n  _s();\n\n  const [customers, setCustomers] = useState([]);\n  useEffect(() => {\n    getCustomers();\n  }, []);\n\n  const getCustomers = () => {\n    fetch('https://customerrest.herokuapp.com/api/customers').then(response => response.json()).then(data => setCustomers(data.content)).catch(err => console.error(err));\n  };\n\n  const deleteCustomer = params => {\n    if (window.confirm('Delete customer and all their trainings?')) {\n      fetch(params.value[0].href, {\n        method: 'DELETE'\n      }).then(_ => fetch(params.value[2].href, {\n        method: 'DELETE'\n      })).then(_ => getCustomers()).catch(err => console.error(err));\n    }\n  };\n\n  const addCustomer = newCustomer => {\n    fetch('https://customerrest.herokuapp.com/api/customers', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(newCustomer)\n    }).then(_ => getCustomers()).catch(err => console.error(err));\n  };\n\n  const addTraining = newTraining => {\n    fetch('https://customerrest.herokuapp.com/api/trainings', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(newTraining)\n    }).then(_ => getCustomers()).catch(err => console.error(err));\n  };\n\n  const editCustomer = (link, editedCustomer) => {\n    fetch(link, {\n      method: 'PUT',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(editedCustomer)\n    }).then(_ => getCustomers()).catch(err => console.error(err));\n  };\n\n  const columns = [{\n    headerName: 'Last name',\n    field: 'lastname',\n    sortable: true,\n    sort: 'asc',\n    filter: true\n  }, {\n    headerName: 'First Name',\n    field: 'firstname',\n    sortable: true,\n    filter: true\n  }, {\n    headerName: 'Address',\n    field: 'streetaddress',\n    sortable: true,\n    filter: true\n  }, {\n    field: 'postcode',\n    sortable: true,\n    filter: true\n  }, {\n    field: 'city',\n    sortable: true,\n    filter: true\n  }, {\n    field: 'email',\n    sortable: true,\n    filter: true\n  }, {\n    field: 'phone',\n    sortable: true,\n    filter: true\n  }, {\n    headerName: '',\n    field: 'data',\n    width: 80,\n    cellRendererFramework: params => /*#__PURE__*/_jsxDEV(ShowTrainings, {\n      params: params\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 46\n    }, this)\n  }, {\n    headerName: '',\n    field: 'data',\n    width: 80,\n    cellRendererFramework: params => /*#__PURE__*/_jsxDEV(AddTraining, {\n      addTraining: addTraining,\n      params: params\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 46\n    }, this)\n  }, {\n    headerName: '',\n    field: 'data',\n    width: 80,\n    cellRendererFramework: params => /*#__PURE__*/_jsxDEV(EditCustomer, {\n      editCustomer: editCustomer,\n      params: params\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 46\n    }, this)\n  }, {\n    headerName: '',\n    field: 'links',\n    width: 80,\n    cellRendererFramework: params => /*#__PURE__*/_jsxDEV(Tooltip, {\n      title: \"Delete customer\",\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        color: \"secondary\",\n        onClick: () => deleteCustomer(params),\n        children: /*#__PURE__*/_jsxDEV(DeleteOutlinedIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }, this)\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Customers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ag-theme-material\",\n      style: {\n        height: 640,\n        width: '100%',\n        margin: 'auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n        rowData: customers,\n        columnDefs: columns,\n        pagination: \"true\",\n        paginationAutoPageSize: \"true\",\n        resizable: \"true\",\n        onFirstDataRendered: gridApi.sizeColumnsToFit,\n        skipHeaderOnAutoSize: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AddCustomer, {\n      addCustomer: addCustomer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Customers, \"h68b3hq6gv818inqQQjo1WvNv/E=\");\n\n_c = Customers;\nexport default Customers;\n\nvar _c;\n\n$RefreshReg$(_c, \"Customers\");","map":{"version":3,"sources":["C:/Users/ilona/Documents/React/ptreact/src/components/customers.js"],"names":["React","useState","useEffect","IconButton","DeleteOutlinedIcon","AgGridReact","Tooltip","AddCustomer","AddTraining","EditCustomer","ShowTrainings","Customers","customers","setCustomers","getCustomers","fetch","then","response","json","data","content","catch","err","console","error","deleteCustomer","params","window","confirm","value","href","method","_","addCustomer","newCustomer","headers","body","JSON","stringify","addTraining","newTraining","editCustomer","link","editedCustomer","columns","headerName","field","sortable","sort","filter","width","cellRendererFramework","height","margin","gridApi","sizeColumnsToFit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nimport { IconButton } from '@material-ui/core'\r\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined'\r\n\r\nimport { AgGridReact } from 'ag-grid-react'\r\nimport 'ag-grid-community/dist/styles/ag-grid.css'\r\nimport 'ag-grid-community/dist/styles/ag-theme-material.css'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\n\r\nimport AddCustomer from './AddCustomer'\r\nimport AddTraining from './AddTraining'\r\nimport EditCustomer from './EditCustomer'\r\nimport ShowTrainings from './ShowTrainings'\r\n\r\n\r\n\r\nfunction Customers() {\r\n    const [customers, setCustomers] = useState([])\r\n    \r\n    useEffect(() => {\r\n        getCustomers()\r\n    }, [])\r\n\r\n    const getCustomers = () => {\r\n        fetch('https://customerrest.herokuapp.com/api/customers')\r\n        .then (response => response.json())\r\n        .then(data => setCustomers(data.content))\r\n        .catch(err => console.error(err))\r\n    }\r\n\r\n    const deleteCustomer = (params) => {\r\n        if (window.confirm('Delete customer and all their trainings?')) {\r\n            fetch(params.value[0].href, {\r\n                method: 'DELETE'\r\n            })\r\n            .then (_ => fetch(params.value[2].href, {\r\n                method: 'DELETE'\r\n            }))\r\n            .then (_ => getCustomers())\r\n            .catch(err => console.error(err))\r\n        }\r\n    }\r\n\r\n    const addCustomer = (newCustomer) => {\r\n        fetch('https://customerrest.herokuapp.com/api/customers', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify(newCustomer)\r\n        })\r\n        .then (_ => getCustomers())\r\n        .catch (err => console.error(err))\r\n    }\r\n\r\n    const addTraining = (newTraining) => {\r\n        fetch('https://customerrest.herokuapp.com/api/trainings', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify(newTraining)\r\n        })\r\n        .then (_ => getCustomers())\r\n        .catch (err => console.error(err))\r\n    }\r\n\r\n    const editCustomer = (link, editedCustomer) => {\r\n        fetch(link, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify(editedCustomer)\r\n        })\r\n        .then (_ => getCustomers())\r\n        .catch (err => console.error(err))\r\n    }\r\n\r\n    const columns = [\r\n        {headerName: 'Last name', field: 'lastname', sortable: true, sort: 'asc', filter: true},\r\n        {headerName: 'First Name', field: 'firstname', sortable: true, filter: true},\r\n        {headerName: 'Address', field: 'streetaddress', sortable: true, filter: true},\r\n        {field: 'postcode', sortable: true, filter: true},\r\n        {field: 'city', sortable: true, filter: true},\r\n        {field: 'email', sortable: true, filter: true},\r\n        {field: 'phone', sortable: true, filter: true},\r\n        {\r\n            headerName: '',\r\n            field: 'data',\r\n            width: 80,\r\n            cellRendererFramework: params => <ShowTrainings params = {params} />\r\n        },\r\n        {\r\n            headerName: '',\r\n            field: 'data',\r\n            width: 80,\r\n            cellRendererFramework: params => <AddTraining addTraining = {addTraining} params = {params} />\r\n        },\r\n        {\r\n            headerName: '',\r\n            field: 'data',\r\n            width: 80,\r\n            cellRendererFramework: params => <EditCustomer editCustomer = {editCustomer} params = {params} />\r\n        },\r\n        {\r\n            headerName: '',\r\n            field: 'links',\r\n            width: 80,\r\n            cellRendererFramework: params =>\r\n                <Tooltip title = 'Delete customer'>\r\n                    <IconButton color = 'secondary' onClick = {() => deleteCustomer(params)}>\r\n                        <DeleteOutlinedIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <h1>Customers</h1>\r\n            <div className = 'ag-theme-material' style = {{height: 640, width: '100%', margin: 'auto'}}>\r\n                <AgGridReact\r\n                    rowData = {customers}\r\n                    columnDefs = {columns}\r\n                    pagination = 'true'\r\n                    paginationAutoPageSize = 'true'\r\n                    resizable = 'true'\r\n                    onFirstDataRendered = {gridApi.sizeColumnsToFit}\r\n                    skipHeaderOnAutoSize\r\n                    >\r\n                </AgGridReact>\r\n            </div>\r\n            <AddCustomer addCustomer = {addCustomer} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Customers"]},"metadata":{},"sourceType":"module"}