{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ilona\\\\Documents\\\\React\\\\ptreact\\\\src\\\\components\\\\Calendar.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport moment from 'moment';\n\nfunction initializeEvents(data) {\n  data.map(training => {\n    return {\n      title: training.activity,\n      start: training.date,\n      end: moment(training.date).add(training.duration, 'm')\n    };\n  });\n}\n\nfunction Calendar() {\n  _s();\n\n  const [trainings, setTrainings] = useState([]); // const [events, setEvents] = useState([])\n\n  useEffect(() => {\n    getTrainings();\n  }, []);\n\n  const getTrainings = () => {\n    fetch('https://customerrest.herokuapp.com/gettrainings').then(response => response.json()).then(data => setTrainings(data)).catch(err => console.error(err));\n  };\n\n  var events = initializeEvents(trainings);\n  console.log(events);\n  return /*#__PURE__*/_jsxDEV(FullCalendar, {\n    plugins: [dayGridPlugin, timeGridPlugin],\n    headerToolbar: {\n      left: 'prev,next today',\n      center: 'title',\n      right: 'dayGridMonth,timeGridWeek,timeGridDay'\n    },\n    initialView: \"dayGridMonth\",\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Calendar, \"uabLU8KjmDYF8yoFx+QKK9rR174=\");\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["C:/Users/ilona/Documents/React/ptreact/src/components/Calendar.js"],"names":["React","useState","useEffect","FullCalendar","dayGridPlugin","timeGridPlugin","moment","initializeEvents","data","map","training","title","activity","start","date","end","add","duration","Calendar","trainings","setTrainings","getTrainings","fetch","then","response","json","catch","err","console","error","events","log","left","center","right"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AAEA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC5BA,EAAAA,IAAI,CAACC,GAAL,CAASC,QAAQ,IAAI;AACjB,WAAO;AACHC,MAAAA,KAAK,EAAED,QAAQ,CAACE,QADb;AAEHC,MAAAA,KAAK,EAAEH,QAAQ,CAACI,IAFb;AAGHC,MAAAA,GAAG,EAAET,MAAM,CAACI,QAAQ,CAACI,IAAV,CAAN,CAAsBE,GAAtB,CAA0BN,QAAQ,CAACO,QAAnC,EAA6C,GAA7C;AAHF,KAAP;AAKH,GAND;AAOH;;AAED,SAASC,QAAT,GAAoB;AAAA;;AAChB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BnB,QAAQ,CAAC,EAAD,CAA1C,CADgB,CAEhB;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZmB,IAAAA,YAAY;AACf,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,YAAY,GAAG,MAAM;AACvBC,IAAAA,KAAK,CAAC,iDAAD,CAAL,CACCC,IADD,CACOC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADnB,EAECF,IAFD,CAEMf,IAAI,IAAIY,YAAY,CAACZ,IAAD,CAF1B,EAGCkB,KAHD,CAGOC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAHd;AAIH,GALD;;AAOA,MAAIG,MAAM,GAAGvB,gBAAgB,CAACY,SAAD,CAA7B;AACAS,EAAAA,OAAO,CAACG,GAAR,CAAYD,MAAZ;AAEA,sBACE,QAAC,YAAD;AACE,IAAA,OAAO,EAAE,CAAC1B,aAAD,EAAgBC,cAAhB,CADX;AAEE,IAAA,aAAa,EAAE;AACX2B,MAAAA,IAAI,EAAE,iBADK;AAEXC,MAAAA,MAAM,EAAE,OAFG;AAGXC,MAAAA,KAAK,EAAE;AAHI,KAFjB;AAOM,IAAA,WAAW,EAAG,cAPpB;AAQM,IAAA,MAAM,EAAIJ;AARhB;AAAA;AAAA;AAAA;AAAA,UADF;AAYH;;GA9BQZ,Q;;KAAAA,Q;AAgCT,eAAeA,QAAf","sourcesContent":["import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\n\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\n\r\nimport moment from 'moment'\r\n\r\nfunction initializeEvents(data) {\r\n    data.map(training => {\r\n        return {\r\n            title: training.activity,\r\n            start: training.date,\r\n            end: moment(training.date).add(training.duration, 'm')\r\n        }\r\n    })\r\n}\r\n\r\nfunction Calendar() {\r\n    const [trainings, setTrainings] = useState([])\r\n    // const [events, setEvents] = useState([])\r\n\r\n    useEffect(() => {\r\n        getTrainings()        \r\n    }, [])\r\n\r\n    const getTrainings = () => {\r\n        fetch('https://customerrest.herokuapp.com/gettrainings')\r\n        .then (response => response.json())\r\n        .then(data => setTrainings(data))\r\n        .catch(err => console.error(err))\r\n    }\r\n\r\n    var events = initializeEvents(trainings)\r\n    console.log(events)\r\n\r\n    return (\r\n      <FullCalendar\r\n        plugins={[dayGridPlugin, timeGridPlugin]}\r\n        headerToolbar={{\r\n            left: 'prev,next today',\r\n            center: 'title',\r\n            right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n        }}\r\n            initialView = \"dayGridMonth\"\r\n            events = {events}\r\n      />\r\n    )\r\n}\r\n\r\nexport default Calendar"]},"metadata":{},"sourceType":"module"}