{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ilona\\\\Documents\\\\React\\\\ptreact\\\\src\\\\components\\\\Calendar.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport moment from 'moment';\nimport { Dialog, DialogActions, DialogTitle, DialogContent, Button } from '@material-ui/core';\n\nfunction Calendar() {\n  _s();\n\n  const [trainings, setTrainings] = useState([]); // const [events, setEvents] = useState([])\n\n  useEffect(() => {\n    getTrainings();\n  }, []);\n\n  const getTrainings = () => {\n    fetch('https://customerrest.herokuapp.com/gettrainings').then(response => response.json()).then(data => setTrainings(data)).catch(err => console.error(err));\n  };\n\n  const events = trainings.map(training => {\n    return {\n      title: training.activity + ' (' + training.duration + ' min)',\n      description: training.customer.firstname + ' ' + training.customer.lastname,\n      start: training.date,\n      end: moment(training.date).add(training.duration, 'm')\n    };\n  });\n  const [open, setOpen] = React.useState(false);\n  const [dialogTitle, setdialogTitle] = React.useState('');\n  const [popContent, setPopContent] = React.useState('');\n\n  const handleEventClick = event => {\n    setPopContent(event.event._def.title);\n    setdialogTitle(event.event._def.extendedProps.description);\n    console.log(event.event._def);\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    // setAnchorEl(null)\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay'\n      },\n      initialView: \"dayGridMonth\",\n      slotMinTime: \"06:00:00\",\n      slotLabelFormat: {\n        hour: '2-digit',\n        minute: '2-digit',\n        meridiem: false,\n        hour12: false\n      },\n      events: events,\n      eventTimeFormat: {\n        hour: '2-digit',\n        minute: '2-digit',\n        meridiem: false,\n        hour12: false\n      },\n      eventClick: handleEventClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: dialogTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: popContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          autoFocus: true,\n          onClick: handleClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Calendar, \"03rokVKoQyKvNHEjvQNeffkrSKA=\");\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["C:/Users/ilona/Documents/React/ptreact/src/components/Calendar.js"],"names":["React","useState","useEffect","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","moment","Dialog","DialogActions","DialogTitle","DialogContent","Button","Calendar","trainings","setTrainings","getTrainings","fetch","then","response","json","data","catch","err","console","error","events","map","training","title","activity","duration","description","customer","firstname","lastname","start","date","end","add","open","setOpen","dialogTitle","setdialogTitle","popContent","setPopContent","handleEventClick","event","_def","extendedProps","log","handleClose","left","center","right","hour","minute","meridiem","hour12"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\n\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport interactionPlugin from '@fullcalendar/interaction'\r\n\r\nimport moment from 'moment'\r\nimport { Dialog, DialogActions, DialogTitle, DialogContent, Button } from '@material-ui/core'\r\n\r\nfunction Calendar() {\r\n    const [trainings, setTrainings] = useState([])\r\n    // const [events, setEvents] = useState([])\r\n    \r\n    useEffect(() => {\r\n        getTrainings()        \r\n    }, [])\r\n    \r\n    const getTrainings = () => {\r\n        fetch('https://customerrest.herokuapp.com/gettrainings')\r\n        .then (response => response.json())\r\n        .then(data => setTrainings(data))\r\n        .catch(err => console.error(err))\r\n    }\r\n    \r\n    const events = trainings.map(training => {\r\n            return {\r\n                title: training.activity + ' (' + training.duration + ' min)',\r\n                description: training.customer.firstname + ' ' + training.customer.lastname,\r\n                start: training.date,\r\n                end: moment(training.date).add(training.duration, 'm')\r\n            }\r\n        })\r\n\r\n\r\n    const [open, setOpen] = React.useState(false)\r\n    const [dialogTitle, setdialogTitle] = React.useState('')\r\n    const [popContent, setPopContent] = React.useState('')\r\n\r\n    const handleEventClick = (event) => {\r\n      setPopContent(event.event._def.title)\r\n      setdialogTitle(event.event._def.extendedProps.description)\r\n      console.log(event.event._def)\r\n      setOpen(true)\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      // setAnchorEl(null)\r\n      setOpen(false)\r\n    };\r\n  \r\n    return (\r\n        <div>\r\n        <FullCalendar\r\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n            headerToolbar={{\r\n                left: 'prev,next today',\r\n                center: 'title',\r\n                right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n            }}\r\n            initialView = \"dayGridMonth\"\r\n            slotMinTime = '06:00:00'\r\n            slotLabelFormat = {{\r\n                hour: '2-digit',\r\n                minute: '2-digit',\r\n                meridiem: false,\r\n                hour12: false\r\n            }}\r\n            events = {events}\r\n            eventTimeFormat = {{\r\n                hour: '2-digit',\r\n                minute: '2-digit',\r\n                meridiem: false,\r\n                hour12: false\r\n            }}\r\n            eventClick = {handleEventClick}\r\n\r\n            />\r\n\r\n            <Dialog\r\n                open = {open}\r\n                onClose = {handleClose}\r\n            >\r\n                <DialogTitle>\r\n                    {dialogTitle}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {popContent}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick = {handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calendar"]},"metadata":{},"sourceType":"module"}