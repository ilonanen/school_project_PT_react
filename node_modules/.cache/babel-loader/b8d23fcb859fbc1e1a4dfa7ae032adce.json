{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ilona\\\\Documents\\\\React\\\\ptreact\\\\src\\\\components\\\\Calendar.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport moment from 'moment';\nimport { Popover } from '@material-ui/core';\n\nfunction Calendar() {\n  _s();\n\n  const [trainings, setTrainings] = useState([]); // const [events, setEvents] = useState([])\n\n  useEffect(() => {\n    getTrainings();\n  }, []);\n\n  const getTrainings = () => {\n    fetch('https://customerrest.herokuapp.com/gettrainings').then(response => response.json()).then(data => setTrainings(data)).catch(err => console.error(err));\n  };\n\n  const events = trainings.map(training => {\n    return {\n      title: training.activity + ' (' + training.duration + ' min), ' + training.customer.firstname + ' ' + training.customer.lastname,\n      start: training.date,\n      end: moment(training.date).add(training.duration, 'm')\n    };\n  });\n  /* const handleEventClick = (info => {\r\n      <Tooltip title = {moment(info.event.start).format('DD.MM.YYYY HH.mm') + ' ' + info.event.title}> event</Tooltip>\r\n  }) */\n\n  const [open, setOpen] = React.useState(false);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [popContent, setPopContent] = React.useState('');\n\n  const handleEventClick = event => {\n    setAnchorEl(event.currentTarget);\n    setPopContent(event.event._def.title);\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay'\n      },\n      initialView: \"dayGridMonth\",\n      slotMinTime: \"06:00:00\",\n      slotLabelFormat: {\n        hour: '2-digit',\n        minute: '2-digit',\n        meridiem: false,\n        hour12: false\n      },\n      events: events,\n      eventTimeFormat: {\n        hour: '2-digit',\n        minute: '2-digit',\n        meridiem: false,\n        hour12: false\n      },\n      eventClick: handleEventClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Popover, {\n      open: open,\n      anchorEl: anchorEl,\n      onClose: handleClose,\n      anchorOrigin: {\n        vertical: 'center' // horizontal: 'center',\n\n      },\n      transformOrigin: {\n        vertical: 'center',\n        horizontal: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: popContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Calendar, \"PEorRvrme3HTQSK5cOZ3PMcaA5w=\");\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["C:/Users/ilona/Documents/React/ptreact/src/components/Calendar.js"],"names":["React","useState","useEffect","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","moment","Popover","Calendar","trainings","setTrainings","getTrainings","fetch","then","response","json","data","catch","err","console","error","events","map","training","title","activity","duration","customer","firstname","lastname","start","date","end","add","open","setOpen","anchorEl","setAnchorEl","popContent","setPopContent","handleEventClick","event","currentTarget","_def","handleClose","left","center","right","hour","minute","meridiem","hour12","vertical","horizontal"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\n\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport interactionPlugin from '@fullcalendar/interaction'\r\n\r\nimport moment from 'moment'\r\nimport { Popover } from '@material-ui/core'\r\n\r\n\r\nfunction Calendar() {\r\n    const [trainings, setTrainings] = useState([])\r\n    // const [events, setEvents] = useState([])\r\n    \r\n    useEffect(() => {\r\n        getTrainings()        \r\n    }, [])\r\n    \r\n    const getTrainings = () => {\r\n        fetch('https://customerrest.herokuapp.com/gettrainings')\r\n        .then (response => response.json())\r\n        .then(data => setTrainings(data))\r\n        .catch(err => console.error(err))\r\n    }\r\n    \r\n    const events = trainings.map(training => {\r\n            return {\r\n                title: training.activity + ' (' + training.duration + ' min), ' + training.customer.firstname + ' ' + training.customer.lastname,\r\n                start: training.date,\r\n                end: moment(training.date).add(training.duration, 'm')\r\n            }\r\n        })\r\n\r\n    /* const handleEventClick = (info => {\r\n        <Tooltip title = {moment(info.event.start).format('DD.MM.YYYY HH.mm') + ' ' + info.event.title}> event</Tooltip>\r\n    }) */\r\n\r\n    const [open, setOpen] = React.useState(false)\r\n    const [anchorEl, setAnchorEl] = React.useState(null)\r\n    const [popContent, setPopContent] = React.useState('')\r\n\r\n    const handleEventClick = (event) => {\r\n      setAnchorEl(event.currentTarget)\r\n      setPopContent(event.event._def.title)\r\n      setOpen(true)\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setAnchorEl(null)\r\n      setOpen(false)\r\n    };\r\n  \r\n    return (\r\n        <div>\r\n        <FullCalendar\r\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n            headerToolbar={{\r\n                left: 'prev,next today',\r\n                center: 'title',\r\n                right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n            }}\r\n            initialView = \"dayGridMonth\"\r\n            slotMinTime = '06:00:00'\r\n            slotLabelFormat = {{\r\n                hour: '2-digit',\r\n                minute: '2-digit',\r\n                meridiem: false,\r\n                hour12: false\r\n            }}\r\n            events = {events}\r\n            eventTimeFormat = {{\r\n                hour: '2-digit',\r\n                minute: '2-digit',\r\n                meridiem: false,\r\n                hour12: false\r\n            }}\r\n            eventClick = {handleEventClick}\r\n            />\r\n\r\n            <Popover\r\n                open = {open}\r\n                anchorEl = {anchorEl}\r\n                onClose = {handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'center',\r\n                    // horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'center',\r\n                    horizontal: 'center',\r\n                }}\r\n            >\r\n                <h3>{popContent}</h3>\r\n            </Popover>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calendar"]},"metadata":{},"sourceType":"module"}